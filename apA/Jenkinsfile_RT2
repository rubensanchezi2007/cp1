pipeline {
    agent {
            label 'built-in'
          }
    stages {
        stage('GetCode') {
            agent {
                        label 'built-in'
                    }
            steps {
               git 'https://github.com/rubensanchezi2007/cp1'
               stash includes: '**', name: 'cp1' 
            }
        }
        stage('Build') {
            agent {
                        label 'built-in'
                    }
            steps {
               echo 'NO HAY QUE COMPILAR NADA ESTO ES PYTHON'
               bat "echo %WORKSPACE%"
            }
            
        }
        stage ('Tests')
        {
            parallel {
                stage('Unit') {
                      agent {
                        label 'dev-agent1'
                    }
                    steps {
                        unstash 'cp1'
                        catchError(buildResult: 'UNSTABLE', stageResult:'FAILURE'){
                            bat '''
                                echo %WORKSPACE%
                                SET PYTHONPATH=%WORKSPACE%
                                python -m pytest --junitxml=result-unit.xml test\\unit
                            '''
                        }
                        stash includes: 'result-unit.xml', name: 'resultsUnit' 
                    }
                    
                }
                stage('rest') {
                    agent {
                        label 'dev-agent2'
                    }
                    steps {
                       catchError(buildResult: 'UNSTABLE', stageResult:'FAILURE'){
                            bat '''
                                echo %WORKSPACE%
                                SET FLASK_APP=app\\api.py
                                start python -m flask run
                                start java -jar c:\\Workspace\\wiremock-standalone-3.10.0.jar --port 9090 --root-dir=.\\test\\wiremock
                                SET PYTHONPATH=%WORKSPACE%
                                python -m pytest --junitxml=result-rest.xml test\\rest
                            '''
                       }
                       stash includes: 'result-rest.xml', name: 'resultsRest'
                    }
                }
            }
            
        }
        stage('Results') {
            agent {
                        label 'built-in'
                    }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult:'FAILURE'){
                    bat '''
                         echo %WORKSPACE%
                    '''
                    unstash 'resultsRest'
                    unstash 'resultsUnit'
                    junit 'result*.xml'
                }
            }
            
        }

    }
}
