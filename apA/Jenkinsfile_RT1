pipeline {
    agent any

    stages {
        stage('GetCode') {
            steps {
               git 'https://github.com/rubensanchezi2007/cp1'
            }
        }
        
        
        stage ('Tests')
        {
            parallel {
                stage('Unit') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult:'FAILURE'){
                            bat '''
                                SET PYTHONPATH=%WORKSPACE%
                                python -m pytest --junitxml=result-unit.xml test\\unit
                            '''
                        }
                    }
                    
                }
                
            }
            
        }
         stage ('Static')
        {
			
			steps {   
					catchError(buildResult: 'UNSTABLE', stageResult:'FAILURE'){
						bat '''
							SET PYTHONPATH=%WORKSPACE%
							flake8 --format pylint --exit-zero app >flake8.out
						''' 
						recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[integerThreshold: 8, threshold: 8.0, type: 'TOTAL'], [criticality: 'FAILURE', integerThreshold: 10, threshold: 10.0, type: 'TOTAL']], sourceCodeRetention: 'LAST_BUILD'
					}
			}
				
			
			
		}
		
		stage ('Security Test')
        {
			
			steps {   
					catchError(buildResult: 'UNSTABLE', stageResult:'FAILURE'){
						bat '''
							SET PYTHONPATH=%WORKSPACE%
							bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}:{severity}:{test_id}:{msg}"
						''' 
						recordIssues tools: [pyLint(pattern : 'bandit.out')], qualityGates: [[integerThreshold: 2, threshold: 2.0, type: 'TOTAL'], [criticality: 'FAILURE', integerThreshold: 4, threshold: 4.0, type: 'TOTAL']], sourceCodeRetention: 'LAST_BUILD'
					}
			}
				
			
			
		}
		
		stage ('Coverage')
        {
			
			steps {   
					catchError(buildResult: 'UNSTABLE', stageResult:'FAILURE'){
						bat '''
							SET PYTHONPATH=%WORKSPACE%
							coverage run --source=app --omit=app\_init_.py,app\api.py -m pytest test\unit
							coverage xml
						''' 
						cobertura coberturaReportFile : 'coverage.xml', onlyStable : false, conditionalCoverageTargets : '100,0,90', lineCoverageTargets : '100,0,90'
						}
			}
				
			
			
		}
		
		stage ('Performance')
        {
			
			steps {   
					catchError(buildResult: 'UNSTABLE', stageResult:'FAILURE'){
						bat '''
							SET FLASK_APP=app\\api.py
                            start python -m flask run
							jmeter -n -t \\test\\jmeter\\flask.jmx -f -l flask.jtl
						''' 
						perfReport sourceDataFiles :'flask.jtl'
						}
			}
				
			
			
		}
		
		 
		
            
        

    }
}
